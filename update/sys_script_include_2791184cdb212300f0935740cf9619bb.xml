<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_279371_basic_sup.JiraIntegrationNew</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>JiraIntegrationNew</name>
        <script><![CDATA[var JiraIntegrationNew = Class.create();
JiraIntegrationNew.prototype = {
    //REST_ISSUE_PATH:  "/rest/api/2/issue",
    LOGGER_SOURCE: "Jira Integration New",
    CORRELATION_DISPLAY: "Jira Integration New",
    initialize: function() {
         this.verbose = gs.getProperty("x_279371_basic_sup.debug", "false");
        //this.midServer = gs.getProperty("com.snc.integration.jira.midserver", "");
        this.sysidField = gs.getProperty("x_279371_basic_sup.sysid_field","10020");
    },
    
    debug : function(msg){
         if(this.verbose=="true"){
            gs.debug(msg);//, this.LOGGER_SOURCE);
         }
    },
    
    createIssue : function( issue ){
		this.debug("Siddharth");
        var json = new global.JSON();
        var body = json.encode(issue);
        
        var r = new sn_ws.RESTMessageV2('x_279371_basic_sup.Jira Issue', 'post');
        r.setBasicAuth(gs.getProperty('x_279371_basic_sup.jira_api_user'), gs.getProperty('x_279371_basic_sup.jira_api_password'));
        
        //this.debug("BODY to be Submitted: \n" + body);
        //r.setXMLParameter('issuebody', body);
		r.setRequestBody(body);
        r.setStringParameter('base_endpoint', gs.getProperty('x_279371_basic_sup.base_jira_instance_url'));
        
        var res = this._submitBodyTypeRequest(r, true);
        return res;
    },
    
    modifyIssue : function( issue, key ){
		j.debug("modify issue");
        var json = new global.JSON();
        var body = json.encode(issue);
        var r = new sn_ws.RESTMessageV2('x_279371_basic_sup.Jira Issue', 'put');
        r.setBasicAuth(gs.getProperty('x_279371_basic_sup.jira_api_user'), gs.getProperty('x_279371_basic_sup.jira_api_password'));
        this.debug("BODY to be Submitted: \n" + body);
        //r.setXMLParameter('issuebody', body);
		r.setRequestBody(body);
        r.setStringParameter('base_endpoint', gs.getProperty('x_279371_basic_sup.base_jira_instance_url'));
        r.setStringParameter("issueKey", key);
        var res = this._submitBodyTypeRequest(r, false);
        return res;
        
    },
    
    addComment : function( comment, key ){
        var json = new global.JSON();
        var body = json.encode(comment);
        var r = new sn_ws.RESTMessageV2('x_279371_basic_sup.Jira Issue Comment', 'post');
        r.setBasicAuth(gs.getProperty('x_279371_basic_sup.jira_api_user'), gs.getProperty('x_279371_basic_sup.jira_api_password'));
        this.debug("Comment BODY to be Submitted: \n" + body);
        //r.setXMLParameter('commentBody', body);
		r.setRequestBody(body);
        r.setStringParameter('base_endpoint', gs.getProperty('x_279371_basic_sup.base_jira_instance_url'));
        r.setStringParameter("issueKey", key);
        resBody = this._submitBodyTypeRequest(r, true);
        
        this.debug("Handling the response data from Jira");
        if(resBody){
            if(this.verbose=="true"){
                JSUtil.logObject(resBody);
            }
            this.createCommentSyncRecord(key, resBody.id, resBody.body, 1);
        }
    },
    
    getComments: function(key){
        var r = new sn_ws.RESTMessageV2('x_279371_basic_sup.Jira Issue Comment', 'get');
        r.setBasicAuth(gs.getProperty('x_279371_basic_sup.jira_api_user'), gs.getProperty('x_279371_basic_sup.jira_api_password'));
        this.debug("Retreiving comments for jira ticket: \n" + key);
        if(this.midServer){
            r.setMIDServer(this.midServer);
        }
        r.setStringParameter('base_url', gs.getProperty('x_279371_basic_sup.base_jira_instance_url'));
        r.setStringParameter("issueKey", key);
        response = this._executeRest(r);
        this.debug("GetComments response: " + response);
        return response;
    },
    
    changeStatus : function( status, key ){
        var json = new JSON();
        var body = json.encode(status);
        
        var r = new RESTMessage('x_279371_basic_sup.Jira Issue Transition', 'post');
         r.setBasicAuth(gs.getProperty('x_279371_basic_sup.jira_api_user'), gs.getProperty('x_279371_basic_sup.jira_api_password'));
        r.setStringParameter('base_url', gs.getProperty('x_279371_basic_sup.base_jira_instance_url'));
        r.setStringParameter('issue_key', key);
        r.setXMLParameter('body', body);
        this._submitBodyTypeRequest(r, false);
    },
    
    createCommentSyncRecord: function( issueID, commentID, body, synced ){
        var gr = new GlideRecord("u_jira_comment");
        gr.initialize();
        gr.u_issue_id = issueID;
        gr.u_comment_id = commentID;
        gr.u_comment = body;
        gr.u_synced = synced;
        gr.insert();
    },
    
    _submitBodyTypeRequest: function(r, waitForResponse){
        if(waitForResponse==null){
            waitForResponse = true;
        }
        //if(this.midServer){
        //    r.setMIDServer(this.midServer);
        //}
        if(waitForResponse){
            var response = this._executeRest(r);
            if(!response){
                return null;
            }
            this.debug("RESPONSE: \n"+ response.getBody());
            //var parser = new global.JSON()
            //var parser = new JSONParser();
            //var jiraIssue = parser.parse(response.getBody());
			var jiraIssue = new global.JSON.parse(response.getBody());
            
            return jiraIssue;
        } else {
            r.execute();
        }
    },
    
    getJiraPriority: function(p){
        //For Now the ID's match up well with OOB values, so keeping them the same ID's
        var jp = p;
        this.debug("Jira priority equivalent to SNC Priority "+p+" is: "+jp);
        return jp;
    },
    
    getJiraStatusID: function(snID){
        if(snID=="6") return "5";
            if(snID=="7") return "701";
            return "3";//else guess that it is reopen
    },
    
    getSysIdPrefix: function(){
        //if( gs.getProperty("com.snc.integration.jira.pull_data") == "true" ){
            return gs.getProperty("x_279371_basic_sup.pull_instance_identifier", "SNC");
        //}
        return "";
    },
    
    _executeRest : function (r){
        if(this.midServer){
            this.debug("Executing request synchronously via MID Server: " + this.midServer);
            return this.executeMidSync(r);
        } else {
            this.debug("Executing request synchronously and directly");
            return this.executeSync(r);
        }
    },
    
    executeSync : function(r){
        return r.execute();
    },
    
    executeMidSync : function(r){
        r.execute();
        
        var k = 1;
        var response = r.getResponse();
        this.debug("Initial response: " + response);
        this.debug("Going to loop for a response from MID Server");
        while (response == null) {
            this.debug("waiting ... " + k + " seconds");
            response = r.getResponse(1000); //wait 1 second before looking for the response
            k++;
            
            if (k > 30) {
                gs.log("ERROR: Web Service did not respond after 30 seconds", this.LOGGER_SOURCE);
                break; // service did not respond after 30 tries
            }
        }
        if(this.verbose){
            JSUtil.logObject(response);
        }
        return response;
    },
    
    checkJiraForIssueUpdates: function(minutesAgo){
        var r = new RESTMessage('Jira Issue Search', 'get');
        r.setBasicAuth(gs.getProperty('com.snc.integration.jira.jira_api_user'), gs.getProperty('com.snc.integration.jira.jira_api_password'));
        r.setStringParameter('base_url', gs.getProperty('com.snc.integration.jira.base_jira_instance_url'));
        r.setXMLParameter('jqlstring', 'updated>-'+minutesAgo+'m and cf['+this.sysidField+']~"'+this.getSysIdPrefix()+'*"'); //For newer versions of an instance
        //r.setXMLParameter('jqlstring', 'updated%3E-'+minutesAgo+'m%20and%20cf%5B'+this.sysidField+'%5D%7E%22'+this.getSysIdPrefix()+'*%22');  //For older versions of an instance
        r.setStringParameter('fields', 'id,key,summary,issuetype,priority,status');
        if(this.midServer){
            r.setMIDServer(this.midServer);
        }
        var response = this._executeRest(r);
        if(response){
            var responseBodyString = response.getBody();
            this.debug("Search Response: " + responseBodyString);
            this.debug("Apply the search result the issues import set table");
            this.applyJiraSearchResultStringToImportSet(responseBodyString);
        }
    },
    
    applyJiraSearchResultStringToImportSet: function(json){
        var parser = new JSONParser();
        var obj = parser.parse(json);
        if(this.verbose=="true") {
            JSUtil.logObject(obj);
        }
        
        for(var i = 0; i<obj.total; i++){
            var is = new GlideRecord("u_jira");
            is.initialize();
            is.u_issue_number = obj.issues[i].key;
            is.u_issue_type = obj.issues[i].fields.issueType.name;
            is.u_status = obj.issues[i].fields.status.id;
            is.u_summary = obj.issues[i].fields.summary;
            var sysid = is.insert();
            this.debug("New IS Record created: " + sysid);
        }
    },
    
    requestCommentsForIssues: function(json){
        var parser = new JSONParser();
        var obj = parser.parse(json);
        if(this.verbose=="true") {
            JSUtil.logObject(obj);
        }
        for(var i = 0; i<obj.total; i++){
            this.requestCommentsForSingleIssue(obj.issues[i].key);
        }
    },
    
    requestCommentsForSingleIssue: function(issueKey){
        var parser = new JSONParser();
        var response = this.getComments(issueKey);
        var jsonComments = response.getBody();
        
        var comments = parser.parse(jsonComments);
        this.debug("Comments: " + comments);
        if(this.verbose=="true"){
            this.debug("Comments Object for key: " + issueKey);
            JSUtil.logDebug(comments);
        }
        for(var c=0; c<comments.total; c++){
            var is = new GlideRecord("u_jira_comment_sync");
            is.initialize();
            is.u_issue_id = issueKey;
            is.u_comment_id = comments.comments[c].id;
            is.u_comment = comments.comments[c].body;
            is.u_synced = false;
            var sysid = is.insert();
            this.debug("New IS Record created for comments: " + sysid);
        }
    },
    
    addExistingComments : function(incID, corrID){
        var journal = new GlideRecord("sys_journal_field");
        journal.addEncodedQuery("element=comments^element_id="+incID);
        journal.query();
        while(journal.next()){
            var comment = new Object();
            comment.body = ""+journal.value;
            this.addComment(comment, corrID);
        }
    },
    
    type: 'JiraIntegrationNew'
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-29 09:28:17</sys_created_on>
        <sys_id>2791184cdb212300f0935740cf9619bb</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>JiraIntegrationNew</sys_name>
        <sys_package display_value="Basic Support Desk" source="x_279371_basic_sup">2f2e228cdb112300f0935740cf96192e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Basic Support Desk">2f2e228cdb112300f0935740cf96192e</sys_scope>
        <sys_update_name>sys_script_include_2791184cdb212300f0935740cf9619bb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-26 07:48:18</sys_updated_on>
    </sys_script_include>
</record_update>
